#!/usr/bin/python

import os
import sys
import configargparse as argparse
import logging
import json
from uuid import uuid4
from threading import Event

import armonic.common
from armonic.frontends.utils import CliBase, CliClient, CliXMPP
from armonic.frontends.utils import COLOR_SEQ, RESET_SEQ, GREEN, RED
from armonic.client.xmpp import XMPPCallSync, XMPPAgentApi, LifecycleException
from armonic.client.smart import Provide
from armonic.frontends.smartonic import run


xmpp_client = None
xmpp_client_ready = Event()
dont_call = False
logger = logging.getLogger()
# generate a deployment id on each run
deployment_id = str(uuid4())


class SmartonicProvide(Provide):

    def list_locations(self):
        locations = []
        for jid in xmpp_client.client_roster:
            item = xmpp_client.client_roster[jid]
            # don't show offline agents or other accounts
            if 'agent' not in item.resources:
                continue
            status = "%soffline%s" % (COLOR_SEQ % RED, RESET_SEQ)
            if item.resources:
                status = "%sonline%s" % (COLOR_SEQ % GREEN, RESET_SEQ)
            locations.append({'value': "%s/%s" % (jid, "agent"),
                              'label': "%s [%s]" % (jid, status)})
        return locations

    def on_lfm(self, host):
        self.lfm_host = host
        self.lfm = XMPPAgentApi(xmpp_client, host, deployment_id=deployment_id)
        self.host = self.lfm.info()['public-ip']

    def do_call(self):
        if dont_call:
            return False
        else:
            return True


class XMPPSmartonic(XMPPCallSync):

    def session_start(self, event):
        XMPPCallSync.session_start(self, event)
        # Join room to get agent logs
        self.join_muc_room(deployment_id)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(default_config_files=armonic.common.CLI_CONF)
    parser.add_argument(dest="xpath", type=str, help='A provide Xpath')

    parser.add_argument('--input', type=str, default=None,
                        help="Load values from file")
    parser.add_argument('--output', type=str, default=None,
                        help="Save values in file")

    parser.add_argument('-a', '--autofill', action='store_true', default=False,
                        help="Autofill variables with proposed values")

    cli_base = CliBase(parser)
    cli_client = CliClient(parser)
    cli_xmpp = CliXMPP(parser)

    args = cli_base.parse_args()
    args = cli_client.parse_args()
    args = cli_xmpp.parse_args()

    dont_call = args.dont_call
    autofill = args.autofill
    manage = args.manage

    prefill = {}
    if args.input and os.path.exists(args.input):
        with open(args.input) as fp:
            prefill = json.load(fp)

    output_file = False
    if args.output:
        output_file = args.output

    root_provide = SmartonicProvide(generic_xpath=args.xpath)
    xmpp_client = XMPPSmartonic(args.jid, cli_xmpp.password,
                                plugins=[], muc_domain=cli_xmpp.muc_domain)

    def run_smart():
        try:
            ret = run(root_provide, prefill, output_file=output_file, manage=manage, autofill=autofill)
            print "Values returned by '%s':" % root_provide.xpath
            print ret
        except KeyboardInterrupt:
            pass
        except LifecycleException as e:
            logger.info(e)
        except:
            logging.exception("Exception in smart:")
        xmpp_client.disconnect()
        sys.exit(0)

    xmpp_client.add_event_handler('roster_update', lambda e: xmpp_client_ready.set())
    if args.host:
        xmpp_client.connect(address=(args.host, args.port))
    else:
        xmpp_client.connect()
    xmpp_client.process(block=False)
    xmpp_client_ready.wait()
    run_smart()
