#!/usr/bin/python

import sys
import argparse
import os.path
import logging
import json
from threading import Event

from armonic.frontends.utils import CliBase, CliClient, CliXMPP
from armonic.frontends.utils import COLOR_SEQ, RESET_SEQ, GREEN, RED
from armonic.client.xmpp import XMPPClientBase, XMPPAgentApi
from armonic.client.smart import Provide
from armonic.frontends.smartonic import run


xmpp_client = None
xmpp_client_ready = Event()
dont_call = False


class SmartonicProvide(Provide):

    def list_locations(self):
        locations = []
        for jid in xmpp_client.client_roster:
            item = xmpp_client.client_roster[jid]
            if 'agent' not in item.resources:
                continue
            status = "%soffline%s" % (COLOR_SEQ % RED, RESET_SEQ)
            if item.resources:
                status = "%sonline%s" % (COLOR_SEQ % GREEN, RESET_SEQ)
            locations.append({'value': '%s/%s' % (jid, item.resources.keys()[0]),
                              'label': "%s [%s]" % (jid, status)})
        return locations

    def on_lfm(self, host):
        self.lfm_host = host
        self.lfm = XMPPAgentApi(xmpp_client, host)

    def do_call(self):
        if dont_call:
            return False
        else:
            return True


class XMPPSmartonic(XMPPClientBase):
    pass


if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog=os.path.basename(sys.argv[0]))
    parser.add_argument(dest="xpath", type=str, help='A provide Xpath')

    parser.add_argument('--input', type=str, default=None,
                        help="Load values from file")
    parser.add_argument('--output', type=str, default=None,
                        help="Save values in file")

    parser.add_argument('-a', '--autofill', action='store_true', default=False,
                        help="Autofill variables with proposed values")

    parser.add_argument("-J", "--jid-agent-host",
                        dest="jid_agent_host",
                        help="jid agent xmpp <user>@<host>/<resource>")

    cli_base = CliBase(parser)
    cli_client = CliClient(parser)
    cli_xmpp = CliXMPP(parser)

    args = cli_base.parse_args()
    args = cli_client.parse_args()
    args = cli_xmpp.parse_args()

    dont_call = args.dont_call
    autofill = args.autofill
    manage = args.manage

    prefill = {}
    if args.input and os.path.exists(args.input):
        with open(args.input) as fp:
            prefill = json.load(fp)

    output_file = False
    if args.output:
        output_file = args.output

    root_provide = SmartonicProvide(generic_xpath=args.xpath)
    xmpp_client = XMPPClientBase(args.jid, args.password)

    def run_smart():
        try:
            run(root_provide, prefill, output_file=output_file, manage=manage, autofill=autofill)
        except KeyboardInterrupt:
            pass
        except:
            logging.exception("Exception in smart:")
        xmpp_client.disconnect()
        sys.exit(0)

    xmpp_client.add_event_handler('roster_update', lambda e: xmpp_client_ready.set())
    if args.host:
        xmpp_client.connect(address=(args.host, args.port))
    else:
        xmpp_client.connect()
    xmpp_client.process(block=False)
    xmpp_client_ready.wait()
    run_smart()
