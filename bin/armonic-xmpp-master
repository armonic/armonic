#!/usr/bin/python

import logging
import configargparse as argparse
from uuid import uuid4
import json

from sleekxmpp.thirdparty import OrderedDict
from sleekxmpp.exceptions import IqTimeout, IqError

import armonic.common
from armonic.serialize import Serialize
from armonic.client.smart import Provide, smart_call, SmartException
from armonic.utils import OsTypeAll
import armonic.frontends.utils
from armonic.xmpp import XMPPAgentApi, XMPPCallSync


agent_handler = logging.StreamHandler()
format = '%(ip)-15s %(levelname)-19s %(module)s %(message)s'
agent_handler.setFormatter(armonic.frontends.utils.ColoredFormatter(format))
xmpp_client = None
logger = logging.getLogger()


class BuildProvide(Provide):

    def on_manage(self, data):
        # FIXME: Strophejs doesn't send a false value
        if data is None:
            self.manage = False
        else:
            self.manage = True

    def on_lfm(self, host):
        self.lfm_host = host
        self.lfm = XMPPAgentApi(xmpp_client, host, deployment_id=xmpp_client.session_id)
        self.host = self.lfm.info()['public-ip']


class XMPPMaster(XMPPCallSync):

    def __init__(self, jid, password, plugins=[], muc_domain=None, lfm=None):
        XMPPCallSync.__init__(self, jid, password, plugins, muc_domain)
        # fixed resource name for xmpp master
        self.requested_jid.resource = "master"
        self.lfm = lfm
        self.smart = None

    def session_start(self, event):
        XMPPCallSync.session_start(self, event)

        self['xep_0050'].add_command(node='provides',
                                     name='Get the list of provides',
                                     handler=self._handle_command_provides)
        self['xep_0050'].add_command(node='build',
                                     name='Build a provide',
                                     handler=self._handle_command_build)

    def handle_armonic_exception(self, exception):
        # Forward exception to client
        logger.error("%s: %s" % (exception['code'],
                                 exception['message']))
        iq = self.Iq()
        iq.error()
        iq['to'] = self['xep_0050'].sessions[exception['deployment_id']]['from']
        iq['exception']['code'] = exception['code']
        iq['exception']['message'] = exception['message']
        try:
            iq.send(block=False)
        except (IqTimeout, IqError):
            pass

    def _handle_command_provides(self, iq, session):
        form = self['xep_0004'].makeForm('form', 'List of provides')
        form['instructions'] = 'Choose a xpath amongst them'
        form.add_reported("xpath")
        form.add_reported("tag")
        form.add_reported("label")
        form.add_reported("help")

        for provide in self.lfm.provide("//*"):
            tags = ""
            if provide['extra'].get('tags'):
                tags = ",".join(provide['extra']['tags'])

            form.add_item(OrderedDict({
                "xpath": provide['xpath'],
                "tag": tags,
                "label": provide['extra'].get('label', provide['name']),
                "help": provide['extra'].get('help', '')
            }))

        session['payload'] = form
        session['next'] = None  # self._handle_command_init_walk
        session['has_next'] = False
        session['id'] = str(uuid4())

        return session

    def _handle_command_build(self, iq, session):
        self.session_id = str(uuid4())
        self.smart = None
        self.root_provide = None
        self.current_step = None

        form = self['xep_0004'].makeForm('form', 'Specify a provide to build')
        form['instructions'] = 'specify'
        form.add_field(var="xpath")
        session['payload'] = form
        session['next'] = self._handle_command_init_build_next
        session['has_next'] = True
        session['id'] = self.session_id

        return session

    def _handle_command_init_build_next(self, payload, session):
        if self.smart is None:
            logger.debug("Step: Create root_provide")
            xpath = payload['values']['xpath']
            self.root_provide = BuildProvide(xpath)
            self.smart = smart_call(self.root_provide)

        if self.current_step == "manage":
            provide, step, args = self.smart.send(payload['values']['manage'])

        elif self.current_step == "lfm":
            provide, step, args = self.smart.send(payload['values']['host'])

        elif self.current_step == "specialize":
            provide, step, args = self.smart.send(payload['values']['xpath'])

        elif self.current_step == "multiplicity":
            provide, step, args = self.smart.send(payload['values']['multiplicity'].split(','))

        elif self.current_step == "validation":
            provide, step, args = self.smart.send(json.loads(payload['values']['validation']))

        elif self.current_step == "call":
            if 'call' in payload['values']:
                provide, step, args = self.smart.send(payload['values']['call'])
        else:
            provide, step, args = self.smart.next()

        if isinstance(args, SmartException):
            self.report_exception(session['from'], args)
            self.smart.next()

        form = self['xep_0004'].makeForm('form', 'Build a provide')
        self.current_step = step

        logger.debug("Current step is now %s" % step)

        form['instructions'] = step
        form.add_field(var="provide",
                       ftype="fixed",
                       value=provide.xpath or provide.generic_xpath,
                       label=provide.extra.get('label', provide.name))

        form.add_field(var="tree_id",
                       ftype="fixed",
                       value=str(json.dumps(provide.tree_id)))

        form.add_field(var="host",
                       ftype="fixed",
                       value=str(json.dumps(provide.lfm_host) or ""))

        if step == 'manage':
            provide_label = provide.extra.get('label', provide.generic_xpath)
            label = provide_label[0].lower() + provide_label[1:]
            field = form.add_field(var="manage",
                                   ftype="input-single",
                                   label="Do you want to %s ?" % label)

        elif step == 'lfm':
            # Try to find the provide on the local lfm since the provide
            # is not resolved yet
            local_provides = lfm.provide(provide.generic_xpath)
            if len(local_provides) == 1:
                provide_label = local_provides[0]['extra'].get('label', provide.generic_xpath)
                label = provide_label[0].lower() + provide_label[1:]
            else:
                label = "call %s" % provide.generic_xpath

            field = form.add_field(var="host",
                                   ftype="input-single",
                                   label="Where do you want to %s ?" % label,
                                   value=json.dumps(provide.host))

        elif step == 'specialize':
            field = form.add_field(var="specialize",
                                   ftype="list-single",
                                   label="Choose")
            for provide_match in provide.matches():
                field.add_option(label=str(provide_match['extra'].get('label', provide_match['name'])),
                                 value=str(provide_match['xpath']))

        elif step == 'multiplicity':
            provide_label = provide.extra.get('label', provide.xpath)
            label = provide_label[0].lower() + provide_label[1:]
            form.add_field(var="multiplicity",
                           ftype="input-single",
                           label="On which hosts do you want to %s ?" % label,
                           value="1")

        elif step == 'validation':
            for variable in provide.variables():
                value = json.dumps(variable.value_get_one())
                field = form.add_field(var=str(variable.xpath),
                                       label=str(variable.name),
                                       ftype="list-multi",
                                       options=[
                                           {"label": "value", "value": str(value)},
                                           {"label": "type", "value": str(variable.type)},
                                           {"label": "error", "value": str(getattr(variable, "error", ""))},
                                           {"label": "resolved_by", "value": str(getattr(variable._resolved_by, "xpath", ""))},
                                           {"label": "suggested_by", "value": str(getattr(variable._suggested_by, "xpath", ""))},
                                           {"label": "set_by", "value": str(getattr(variable._set_by, "xpath", ""))},
                                           {"label": "belongs_provide_ret", "value": str(variable.belongs_provide_ret)}],
                                       required=variable.required)
                for key, value in variable.extra.items():
                    field.add_option(label=str(key), value=str(value))

        elif step == 'call':
            if args is None:
                form.add_field(var="call",
                               ftype="input-single",
                               value="1")
            else:
                form.add_field(var="call_result",
                               ftype="input-single",
                               value=json.dumps(args))

        session['payload'] = form
        session['next'] = self._handle_command_init_build_next
        session['has_next'] = True

        # If the root provide step is done, this is the last answer.
        if step == 'done' and provide == self.root_provide:
            session['next'] = None
            session['has_next'] = False

        return session


if __name__ == '__main__':
    parser = argparse.ArgumentParser(default_config_files=armonic.common.MASTER_CONF)

    cli_base = armonic.frontends.utils.CliBase(parser)
    cli_local = armonic.frontends.utils.CliLocal(parser, disable_options=["--os-type", "--simulation"])
    cli_xmpp = armonic.frontends.utils.CliXMPP(parser)
    args = cli_base.parse_args()
    args = cli_local.parse_args()
    args = cli_xmpp.parse_args()

    lfm = Serialize(os_type=OsTypeAll())
    logging.getLogger('armonic').setLevel(cli_base.logging_level)

    # Use /master resource by default
    xmpp_client = XMPPMaster(args.jid,
                             cli_xmpp.password,
                             plugins=[('xep_0050',)],
                             muc_domain=cli_xmpp.muc_domain,
                             lfm=lfm)
    if not args.host:
        xmpp_client.connect()
    else:
        xmpp_client.connect(address=(args.host, args.port))
    try:
        xmpp_client.process(block=True)
    except KeyboardInterrupt:
        logger.info("Disconnecting...")
        pass
