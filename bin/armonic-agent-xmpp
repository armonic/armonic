#!/usr/bin/python
"""
XMPP agent for armonic

armonic-agent-xmpp --jid server1@example.com --password passwd --jid-master master@example.com

The agent will try to register an account on the XMPP server by default.
It will subscribe to the --jid-master to that the master account has all agents
in its roster.
"""

import sys
import logging
from logging.handlers import RotatingFileHandler
import argparse
import json

import armonic.common
from armonic.serialize import Serialize, MethodNotExposed
from armonic.persist import Persist
from armonic.client.xmpp import XMPPClientBase
import armonic.frontends.utils

from sleekxmpp.exceptions import IqError, IqTimeout
from sleekxmpp.xmlstream.handler import Callback
from sleekxmpp.xmlstream.matcher import StanzaPath

if sys.version_info < (3, 0):
    from sleekxmpp.util.misc_ops import setdefaultencoding
    setdefaultencoding('utf8')
else:
    raw_input = input


class MUCHandler(logging.Handler):
    """Logging handler used to send armonic logs
    in a MUC room.
    """
    def init(self, client, id):
        self.client = client
        self.id = id

    def emit(self, record):
        if not self.client:
            return
        self.client.send_muc_message(self.id, str(record.msg))
        return True


class SleekXMPPFilter(logging.Filter):
    """Don't forward SleekXMPP logs to avoid infinite loop on MUC
    handler."""
    def filter(self, record):
        return not record.name.startswith("sleekxmpp")


muc_handler = MUCHandler()
muc_handler.addFilter(SleekXMPPFilter())


class MalformedJID(Exception):
    pass


class XMPPAgent(XMPPClientBase):

    def __init__(self, jid, password, muc_domain=None, lfm=None, jid_master=None):
        XMPPClientBase.__init__(self, jid, password, plugins=[('xep_0066',), ('xep_0077',)], muc_domain=muc_domain)

        self['xep_0077'].force_registration = True
        self.add_event_handler("register", self.register, threaded=True)

        self.jid_master = jid_master
        self.lfm = lfm

        # To handle LifecycleManager method calls
        self.registerHandler(
            Callback('handle a call',
                     StanzaPath('iq@type=set/call'),
                     self._handle_action)
        )
        self.add_event_handler('call_method',
                               self._handle_call_method,
                               threaded=True)

    def session_start(self, event):
        XMPPClientBase.session_start(self, event)
        self.send_presence(pto=self.jid_master, ptype='subscribe',
                           pstatus="New Armonic Agent %s" % self.boundjid.jid, pshow="chat")

    def _handle_action(self, iq):
        """
        Raise an event for the stanza so that it can be processed in its
        own thread without blocking the main stanza processing loop.
        """
        self.event('call_method', iq)

    def _handle_call_method(self, iq):
        """
        Respond to the custom action event.
        Since one of the actions is to disconnect, this
        event handler needs to be run in threaded mode, by
        using `threaded=True` in the `add_event_handler` call.
        """
        params = iq['call']['params']
        method = iq['call']['method']
        deployment_id = iq['call'].get('deployment_id', None)
        caller = iq['from']

        if deployment_id and self.muc_domain:
            self.join_muc_room(deployment_id)
            muc_handler.init(self, deployment_id)
            logger.addHandler(muc_handler)

        logger.info("Executing method '%s' called by '%s'..." % (
            method, caller))

        def call_done():
            # stop logging
            if deployment_id and self.muc_domain:
                logger.removeHandler(muc_handler)
                self.leave_muc_room(deployment_id)

        try:
            request = self.parse_json(params)
            iq.reply()
            iq['status']['value'] = "executing"
            iq.send()
            result = self.lfm._dispatch(method, *request['args'], **request['kwargs'])
            call_done()
            # send the call result
            iq = self.Iq()
            iq['type'] = 'set'
            iq['to'] = caller
            iq['result']['value'] = json.dumps(result)
            iq.send()
        except MethodNotExposed:
            call_done()
            message = "Method %s is not supported" % method
            logger.error(message)
            iq = self.Iq()
            iq.error()
            iq['to'] = caller
            iq['status']['value'] = 'not found'
            iq['exception']['code'] = 'MethodNotExposed'
            iq['exception']['message'] = message
            iq['exception']['deployment_id'] = deployment_id
            iq['error']['code'] = "424"
            iq['error']['text'] = message
            iq['error']['condition'] = 'MethodNotExposed'
            iq.send()
        except IqError as e:
            call_done()
            logger.error("Call method %s returned an error: %s" % (
                method,
                e.iq['error']['condition'])
            )
        except Exception as error:
            call_done()
            logger.exception("Exception while calling method %s with %s" % (method, request))
            self.report_exception(caller, error, deployment_id=deployment_id)

        logger.debug("Method %s call end" % method)

    def register(self, iq):
        """
            Fill out and submit a registration form.
            The form may be composed of basic registration fields, a data form,
            an out-of-band link, or any combination thereof. Data forms and OOB
            links can be checked for as so:
            if iq.match('iq/register/form'):
            # do stuff with data form
            # iq['register']['form']['fields']
            if iq.match('iq/register/oob'):
            # do stuff with OOB URL
            # iq['register']['oob']['url']
            To get the list of basic registration fields, you can use:
            iq['register']['fields']
        """
        logger.debug("Registration of '%s'..." % self.boundjid.bare)
        resp = self.Iq()
        resp['type'] = 'set'
        resp['register']['username'] = self.boundjid.user
        resp['register']['password'] = self.password
        try:
            resp.send(now=True)
            logging.info("Account registered for '%s'" % self.boundjid.bare)
        except IqError as e:
            logging.warning("Could not register account: %s" %
                            e.iq['error']['text'])
        except IqTimeout:
            logging.error("No response from server.")
            self.disconnect()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog=__file__)

    parser.add_argument('--no-load-state', '-l', dest="no_load_state",
                        action="store_true", default=False,
                        help='Load Armonic agent state on start (default: %(default)s))')
    parser.add_argument('--no-save-state', '-s', dest="no_save_state",
                        action="store_true", default=False,
                        help='Save Armonic agent state on exit (default: %(default)s))')
    parser.add_argument('--state-path', dest="state_path", type=str,
                        default="/tmp/armonic_%s%s_state",
                        help='Armonic state files paths (default: %(default)s))')

    parser.add_argument('--jid-master', type=armonic.frontends.utils.jidType,
                        default="master@im.aeolus.org",
                        help="JID of the master (default '%(default)s')")

    cli = armonic.frontends.utils.CliBase(parser)
    cli_xmpp = armonic.frontends.utils.CliXMPP(parser, confirm_password=True)
    cli_local = armonic.frontends.utils.CliLocal(parser)

    args = cli.parse_args()
    args = cli_xmpp.parse_args()
    args = cli_local.parse_args()

    logger = logging.getLogger()

    formatter = logging.Formatter(
        '%(asctime)s :: %(levelname)s :: %(message)s')
    file_handler = RotatingFileHandler("/tmp/armonic-agent-xmpp.log",
                                       'a',
                                       1000000, 1)
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)

    save_state = not args.no_save_state
    load_state = not args.no_load_state
    persist = Persist(load_state, save_state, args.state_path)
    lfm = Serialize(os_type=cli_local.os_type)

    try:
        xmpp_client = XMPPAgent("%s/agent" % args.jid,
                                cli_xmpp.password,
                                muc_domain=cli_xmpp.muc_domain,
                                lfm=lfm,
                                jid_master=args.jid_master)
    except MalformedJID:
        sys.exit(1)

    if args.host:
        xmpp_client.connect(address=(args.host, args.port))
    else:
        xmpp_client.connect()

    xmpp_client.process(block=True)
