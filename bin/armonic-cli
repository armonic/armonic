#!/usr/bin/python
"""This is a client implementation module.

Actions needed to control agent:
- load a module
- get information about this module

"""

import sys
import argparse
import logging
from threading import Event
from uuid import uuid4

from armonic.client.xmpp import XMPPAgentApi, XMPPCallSync, XMPPError
from armonic.frontends.utils import COLOR_SEQ, RESET_SEQ, GREEN, CYAN
import armonic.frontends.cli

logger = logging.getLogger()
# generate a deployment id on each run
deployment_id = str(uuid4())


class XMPPCli(XMPPCallSync):

    def __init__(self, *args, **kwargs):
        XMPPCallSync.__init__(self, *args, **kwargs)
        self.add_event_handler("groupchat_message", self.on_agent_log)

    def session_start(self, event):
        XMPPCallSync.session_start(self, event)
        # Join room to get agent logs
        self.join_muc_room(deployment_id)

    def on_agent_log(self, msg):
        if msg['body']:
            logger.info('[%s%s%s] %s%s%s' % (COLOR_SEQ % GREEN, msg['from'].resource, RESET_SEQ,
                                             COLOR_SEQ % CYAN, msg['body'], RESET_SEQ))
    def list_locations(self):
        locations = []
        for jid in self.client_roster:
            item = self.client_roster[jid]
            # don't show offline agents or other accounts
            if 'agent' not in item.resources:
                continue
            status = "offline"
            if item.resources:
                status = "online"
            locations.append((jid, status))
        return locations

def print_locations(client):
    print "Retrieving online locations..."
    from time import sleep
    sleep(2)
    for (j, s) in client.list_locations():
        print j, "is", s

parser = argparse.ArgumentParser(
    prog='armonic-cli',
    description=("A simple client to contact an Armonic agent. "
                 "It is mainly used to get informations "
                 "but can also do some simple actions."))

cli_base = armonic.frontends.utils.CliBase(parser)
cli_xmpp = armonic.frontends.utils.CliXMPP(parser)

parent_parser = argparse.ArgumentParser(add_help=False)
parent_parser.add_argument("-J", "--jid-agent",
                           type=armonic.frontends.utils.jidType,
                           required=True,
                           help="Agent JID to query")

cli = armonic.frontends.cli.Cli(parser, [parent_parser])

parser_list = cli.subparsers.add_parser('list', help='List available agents')
parser_list.set_defaults(func=lambda args : print_locations(xmpp_client))

args = cli_base.parse_args()
args = cli_xmpp.parse_args()

xmpp_client_ready = Event()
xmpp_client = XMPPCli(args.jid, cli_xmpp.password,
                      plugins=[], muc_domain=cli_xmpp.muc_domain)

if 'jid_agent' in args:
    agent = XMPPAgentApi(xmpp_client, args.jid_agent + "/agent", deployment_id=deployment_id)
else:
    agent = None

def run_cli():
    try:
        cli.func(agent)
    except XMPPError:
        pass
    xmpp_client.disconnect()
    sys.exit(0)

xmpp_client.add_event_handler('session_start', lambda e: xmpp_client_ready.set())
if args.host:
    xmpp_client.connect(address=(args.host, args.port))
else:
    xmpp_client.connect()
xmpp_client.process(block=False)
xmpp_client_ready.wait()
run_cli()
