#!/usr/bin/python
"""This is a client implementation module.

Actions needed to control agent:
- load a module
- get information about this module

"""

import argparse
import re
import sys
import logging
from armonic.client.xmpp import Xmpp, XmppError
import armonic.frontends.cli
from armonic.frontends.utils import colorize, read_passwd

logger = logging.getLogger()

parser = argparse.ArgumentParser(
    prog='armonic-cli',
    description=("A simple client to contact a Armonic agent. "
                 "It is mainly used to get informations "
                 "but can also do some simple actions."))
parser.add_argument("-J", "--jid-agent", dest="jid_agent_host",
                    help="jid agent xmpp <user>@<host>/<resource>")
parser.add_argument('--jid', '-j', type=str, dest="jid_armonic_cli",
                    help="Jid client xmpp <user>@<host>[:port]/<resource>")
parser.add_argument('--password', type=str,
                    help="Password client xmpp armonic-cli")
parser.add_argument('-H', '--host', dest="host_xmpp", type=str,
                    help='jabberd host different from host uri jid')

cli_base = armonic.frontends.utils.CliBase(parser)
cli = armonic.frontends.cli.Cli(parser)

args = cli_base.parse_args()

format = '%(asctime)s|%(levelname)6s - %(ip)s/%(xpath)s - %(message)s'
sh = logging.StreamHandler()
sh.setLevel(cli_base.logging_level)
sh.setFormatter(logging.Formatter(format))

if args.jid_armonic_cli:
    try:
        test1 = re.match("^([a-zA-Z0-9\.]{1,50})+\@([a-zA-Z0-9\.]{1,50})+:?([0-9]{1,5})?\/([a-zA-Z0-9]{1,50})?$", args.jid_armonic_cli)
        (node, domaine, port, ressource) = test1.groups()
    except Exception as e:
        test1 = False
    if not test1:
        if not ressource:
            logger.error(colorize('error ressource missing :', 'red', True) +
                          " --jid (eg: <user>@<host>[:port]/<resource>)")
        elif not node:
            logger.error(colorize('error user missing :', 'red', True) +
                          " --jid (eg: <user>@<host>[:port]/<resource>)")
        elif not domaine:
            logger.error(colorize('error host missing :', 'red', True) +
                          " --jid (eg: <user>@<host>[:port]/<resource>)")
        sys.exit(1)
    else:
        if node is None:
            logger.error(colorize('error option :', 'red', True) +
                          " --jid see user uri (eg: <user>@<host>[:port]/<resource>)")
            sys.exit(1)
        if domaine is not None and args.host_xmpp is None:
            args.host_xmpp = domaine
        if ressource is None:
            logger.error(colorize('error option :', 'red', True) +
                          "--jid see resource uri \
            (eg: <user>@<host>[:port]/<resource>)")
            sys.exit(1)
else:
    logger.error(colorize('option missing:', 'red', True) +
                  " --jid (eg: <user>@<host>[:port]/<resource>)")
    sys.exit(1)

if port is None:
    port_serveur_xmpp = 5222
else:
    port_serveur_xmpp = port
if args.jid_agent_host:
    try:
        test = re.match("^([a-zA-Z0-9\.]{1,50})+\@([a-zA-Z0-9\.]{1,50})+\/([a-zA-Z0-9]{1,50})?$",
                        args.jid_agent_host)
    except Exception as e:
        test = False
    if not test:
        logger.error(colorize('error option :', 'red', True) +
                      " --jid-agent-host missing ressource (eg: <user>@<host>/<resource>)")
        sys.exit(1)
else:
    logger.error('error option :' +
                  "--jid-agent-host missing with xmpp")
    sys.exit(1)

if not args.password:
    args.password = read_passwd("password JID xmpp client for armonic-cli",
                                node, check=True)

if not args.host_xmpp:
    logger.error(colorize('error option :', 'red', True) +
                  " --host-xmpp missing with xmpp")
    sys.exit(1)

jid_armonic_cli = node+"@"+domaine+"/"+ressource

logger.debug("jid xmpp  %s " % jid_armonic_cli)
logger.debug("port server jaberd  %s " % port_serveur_xmpp)
logger.debug("jid_agent_host  %s " % args.jid_agent_host)
logger.debug("host server jabberd  %s " % args.host_xmpp)
logger.debug("ressource  %s " % ressource)
logger.debug("user  %s " % node)
logger.debug("domaine  %s " % domaine)
logger.debug("password  %s " % args.password)
client = Xmpp(jid_armonic_cli,
              args.password,
              args.jid_agent_host,
              args.host_xmpp,
              port_serveur_xmpp)

try:
    cli.func(client)
except XmppError:
    pass

client.close()
