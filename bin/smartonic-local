#!/usr/bin/python
import configargparse as argparse
import os.path
import sys
import json

import armonic.frontends.utils
from armonic.serialize import Serialize
from armonic.client.smart import Provide, smart_call
import armonic.frontends.smartonic


parser = argparse.ArgumentParser(prog=os.path.basename(sys.argv[0]),
                                 default_config_files=armonic.common.CLI_CONF)
parser.add_argument(dest="xpath", type=str, help='A provide Xpath')
parser.add_argument('--input', type=str, default=None,
                    help="Load values from file")
parser.add_argument('--output', type=str, default=None,
                    help="Save values in file")

parser.add_argument('-a', '--autofill', action='store_true', default=False,
                    help="Autofill variables with proposed values")


cli_base = armonic.frontends.utils.CliBase(parser)
cli_local = armonic.frontends.utils.CliLocal(parser)
cli_client = armonic.frontends.utils.CliClient(parser)

args = cli_base.parse_args()
args = cli_local.parse_args()
args = cli_client.parse_args()

dont_call = args.dont_call
autofill = args.autofill
manage = args.manage

import armonic.common
armonic.common.SIMULATION = args.simulation
armonic.common.DONT_VALIDATE_ON_CALL = args.simulation

lfms = {}

class MyProvide(Provide):
    # @lfm.setter
    # def lfm(self, value):
    #     return lfm

    def on_lfm(self, host):
        self.lfm_host = host
        self.host = host
        if host not in lfms:
            lfms[host] = Serialize(os_type=cli_local.os_type)
        self.lfm = lfms[host]

    def on_manage(self, data):
        return True

    def do_call(self):
        if dont_call:
            return False
        else:
            return True

root_provide = MyProvide(generic_xpath=args.xpath)

prefill = {}
if args.input and os.path.exists(args.input):
    with open(args.input) as fp:
        prefill = json.load(fp)

output_file = False
if args.output:
    output_file = args.output


armonic.frontends.smartonic.run(root_provide, prefill, output_file=output_file, manage=manage, autofill=autofill)
