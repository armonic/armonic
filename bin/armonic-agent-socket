#!/usr/bin/python
"""
Socket agent.

All logger event are send through the socket.
The return of function call is :
{"return":value} | {"exception":value}.
'value' is "picklized".

Protocol:
1) send a struct ((int) msg_size_in_bytes , (bool) last_msg?)
2) send message

"""
import logging
import logging.handlers
import pickle
import SocketServer
import struct
import argparse

from armonic.serialize import Serialize
from armonic.persist import Persist
import armonic.common

PACKET_INFO_SIZE = 5

def my_send(socket, string):
    send_size = len(string)
    sent_size = socket.send(string)
    if sent_size < send_size:
        logger.warning("Packet has not been sent entirely: %d bytes instead of %d bytes." % (sent_size, send_size))

def sendString(socket,string,last=False):
    packer=struct.Struct("!I?")
    packet=pickle.dumps(string)
    p=packer.pack(len(packet),last)
    my_send(socket, p)
    my_send(socket, packet)

class SocketIO(object):
    def __init__(self,socket):
        self._socket=socket

    def write(self,string):
        try:
            sendString(self._socket,string)
        except:pass

class MyStreamHandler(logging.StreamHandler):
    """To send PROCESS log byte per byte."""
    def emit(self,record):
        self.stream.write(record)

class MyTCPHandler(SocketServer.BaseRequestHandler):
    """
    The RequestHandler class for our server.

    It is instantiated once per connection to the server, and must
    override the handle() method to implement communication to the
    client.
    """
    logging_level = logging.INFO

    def redirect_log(self):
        # self.request is the TCP socket connected to the client
        socketIO = SocketIO(self.request)

        self._logger = logging.getLogger()
        self._logger.setLevel(self.logging_level)
#       format = '%(asctime)s|%(name)s|%(levelname)s: %(message)s'
#       format = '%(asctime)s|%(levelname)7s %(ip)15s: %(message)s'
#       self._logHandler = logging.StreamHandler(socketIO)
        self._logHandler = MyStreamHandler(socketIO)
        self._logHandler.setLevel(self.logging_level)
#       self._logHandler.setFormatter(logging.Formatter(format))
        self._logHandler.addFilter(armonic.common.NetworkFilter())
        self._logHandler.addFilter(armonic.common.XpathFilter())
        self._logger.addHandler(self._logHandler)

    def finish(self):
        try:
            self._logger.removeHandler(self._logHandler)
        except AttributeError:pass

    def parseRequest(self,data):
        """transform unicode to str. FIXME...  Some problems appear
        with augeas when unicode string are used to set it."""
        ret = pickle.loads(data)
        return ret

    def handle(self):
        data = self.request.recv(1024)
        request = self.parseRequest(data)
        self.redirect_log()

        try:
            ret = lfm._dispatch(request['method'], *request['args'], **request['kwargs'])
        except Exception as e:
            self._logger.exception(e)
            sendString(self.request, {'exception': e}, True)
        else:
            sendString(self.request, {'return': ret}, True)

class MyTCPServer(SocketServer.TCPServer):
    allow_reuse_address=True

if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog=__file__)
    parser.add_argument('--port', '-P', type=int, default=8000, help='Armonic agent port (default: %(default)s))')
    parser.add_argument('--host', '-H', type=str, default="0.0.0.0", help='Armonic agent IP (default: %(default)s))')
    parser.add_argument('--verbose', '-v', dest="verbose", default=False, action="store_true", help='Verbose mode (default: %(default)s))')
    parser.add_argument('--lifecycles-dir', '-d', dest="lifecycles_dirs", type=str, default=[], nargs="*", help='Lifecycles directory')
    parser.add_argument('--lifecycles-include', '-i', dest="lifecycles_includes", type=str, nargs="*", default=[], help='Lifecycles names to import')
    parser.add_argument('--no-default-lifecycles', dest="no_default_lifecycles", action="store_true", default=False, help="Don't load provided lifecycles (default: %(default)s))")
    parser.add_argument('--no-load-state', '-l', dest="no_load_state", action="store_true", default=False, help='Load Armonic agent state on start (default: %(default)s))')
    parser.add_argument('--no-save-state', '-s', dest="no_save_state", action="store_true", default=False, help='Save Armonic agent state on exit (default: %(default)s))')
    parser.add_argument('--state-path', dest="state_path", type=str, default="/tmp/armonic_%s%s_state", help='Armonic state files paths (default: %(default)s))')
    parser.add_argument('--halt-on-error', default=False, action="store_true", help='Halt agent if a module import occurs (default: %(default)s))')

    args = parser.parse_args()

    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    format = '%(asctime)s|%(levelname)7s - %(message)s'
    ch = logging.StreamHandler()
    ch.setLevel(logging.INFO)
    ch.setFormatter(logging.Formatter(format))
    format = '%(asctime)s|%(name)20s|%(levelname)6s: %(message)s'
    fh = logging.handlers.RotatingFileHandler("/tmp/armonic.log", maxBytes=10485760, backupCount=5)
    fh.setLevel(logging.INFO)
    fh.setFormatter(logging.Formatter(format))
    logger.addHandler(ch)
    logger.addHandler(fh)

    if args.verbose:
        MyTCPHandler.logging_level = logging.DEBUG
        logger.setLevel(logging.DEBUG)
        fh.setLevel(logging.DEBUG)
        ch.setLevel(logging.DEBUG)

    if not args.no_default_lifecycles:
        armonic.common.load_lifecycles(
            lifecycle_includes=args.lifecycles_includes,
            raise_import_error=args.halt_on_error)
    for dir in args.lifecycles_dirs:
        armonic.common.load_lifecycles(
            dir,
            lifecycle_includes=args.lifecycles_includes,
            raise_import_error=args.halt_on_error)
        
    save_state = not args.no_save_state
    load_state = not args.no_load_state

    persist = Persist(load_state, save_state, args.state_path)
    lfm = Serialize()

    print "Server listening on %s:%d" % (args.host, args.port)
    server = MyTCPServer((args.host, args.port), MyTCPHandler)
    # Activate the server; this will keep running until you
    # interrupt the program with Ctrl-C
    try:
        server.serve_forever()
    except KeyboardInterrupt:
        print "Exiting."
        persist.save()
